// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PingPong.Infrastructure.Persistence;

#nullable disable

namespace PingPong.Infrastructure.Migrations
{
    [DbContext(typeof(PingPongDbContext))]
    [Migration("20251019174829_Test2")]
    partial class Test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PingPong.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("LatestEventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PlayerOneId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerOneSetsWon")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerTwoId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerTwoSetsWon")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PrimaryEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("PrimaryEventId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerOneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerTwoId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupersedesEventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("SupersedesEventId");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchEventSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerOneScore")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerTwoScore")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchEventId", "SetNumber")
                        .IsUnique();

                    b.ToTable("MatchEventSets");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerOneScore")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerTwoScore")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId", "SetNumber")
                        .IsUnique();

                    b.ToTable("MatchSets");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.PlayerAlias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "AliasName")
                        .IsUnique();

                    b.ToTable("PlayerAliases");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.PlayerRating", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentRating")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamptz");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerRatings");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.Match", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingPong.Domain.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingPong.Domain.Entities.MatchEvent", "PrimaryEvent")
                        .WithOne()
                        .HasForeignKey("PingPong.Domain.Entities.Match", "PrimaryEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerTwo");

                    b.Navigation("PrimaryEvent");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchEvent", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.Match", "Match")
                        .WithMany("Events")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PingPong.Domain.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingPong.Domain.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingPong.Domain.Entities.MatchEvent", "SupersededEvent")
                        .WithMany()
                        .HasForeignKey("SupersedesEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Match");

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerTwo");

                    b.Navigation("SupersededEvent");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchEventSet", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.MatchEvent", "MatchEvent")
                        .WithMany("Sets")
                        .HasForeignKey("MatchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchEvent");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchSet", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.PlayerAlias", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.Player", "Player")
                        .WithMany("Aliases")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.PlayerRating", b =>
                {
                    b.HasOne("PingPong.Domain.Entities.Player", "Player")
                        .WithOne("Rating")
                        .HasForeignKey("PingPong.Domain.Entities.PlayerRating", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.Match", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.MatchEvent", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PingPong.Domain.Entities.Player", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("Rating");
                });
#pragma warning restore 612, 618
        }
    }
}
