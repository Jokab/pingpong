@inject IStandingsService StandingsService

<MudPaper Elevation="1" Class="pa-4 standings-card">
    <MudStack Spacing="2">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h5" Class="font-weight-semibold">Standings</MudText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                @if (_isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh"
                           Disabled="_isLoading" OnClick="RefreshAsync">
                    Refresh
                </MudButton>
            </MudStack>
        </MudStack>

        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Dense="true">
                @_errorMessage
            </MudAlert>
        }

        <MudTable Items="_rows" Hover="true" Dense="true" Class="standings-table" Loading="_isLoading">
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Player</MudTh>
                <MudTh class="text-center">Matches</MudTh>
                <MudTh class="text-center">Wins</MudTh>
                <MudTh class="text-center">Losses</MudTh>
                <MudTh class="text-center">Win %</MudTh>
                <MudTh class="text-center">Rating</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="#">@context.Position</MudTd>
                <MudTd DataLabel="Player">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudAvatar Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                            @context.Initials
                        </MudAvatar>
                        <MudText>@context.Name</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="Matches" Class="text-center">@context.MatchesPlayed</MudTd>
                <MudTd DataLabel="Wins" Class="text-center">@context.Wins</MudTd>
                <MudTd DataLabel="Losses" Class="text-center">@context.Losses</MudTd>
                <MudTd DataLabel="Win %" Class="text-center">@context.WinPercentage.ToString("P0")</MudTd>
                <MudTd DataLabel="Rating" Class="text-center">@context.Rating.ToString("F0")</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Typo="Typo.body2" Class="ma-4" Color="Color.Secondary">
                    No matches recorded yet. Be the first to log a game!
                </MudText>
            </NoRecordsContent>
        </MudTable>

        <MudAlert Severity="Severity.Info" Dense="true" Variant="Variant.Text">
            Head-to-head breakdowns and live refresh will appear here as those features land.
        </MudAlert>
    </MudStack>
</MudPaper>

@code {
    private readonly List<StandingsRowViewModel> _rows = new();
    private bool _isLoading;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task RefreshAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if (_isLoading)
        {
            return;
        }

        _errorMessage = null;
        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var standings = await StandingsService.GetStandingsAsync();
            var updatedRows = standings
                .Select((row, index) => new StandingsRowViewModel(
                    index + 1,
                    row.PlayerId,
                    row.PlayerName,
                    BuildInitials(row.PlayerName),
                    row.MatchesPlayed,
                    row.Wins,
                    row.Losses,
                    row.WinPercentage,
                    row.CurrentRating))
                .ToList();

            _rows.Clear();
            _rows.AddRange(updatedRows);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load standings: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private static string BuildInitials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "?";
        }

        var parts = name.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        if (parts.Length == 0)
        {
            return "?";
        }

        if (parts.Length == 1)
        {
            var segment = parts[0];
            return segment.Length switch
            {
                0 => "?",
                1 => segment.ToUpperInvariant(),
                _ => string.Concat(char.ToUpperInvariant(segment[0]), char.ToUpperInvariant(segment[1]))
            };
        }

        var initials = string.Concat(parts.Take(2).Select(p => char.ToUpperInvariant(p[0])));
        return initials.Length == 0 ? "?" : initials;
    }

    private sealed record StandingsRowViewModel(
        int Position,
        Guid PlayerId,
        string Name,
        string Initials,
        int MatchesPlayed,
        int Wins,
        int Losses,
        double WinPercentage,
        double Rating);
}
