@inject HttpClient Http

<MudStack Spacing="2" Class="history-timeline">
    <MudText Typo="Typo.h5" Class="font-weight-semibold">Match Log</MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary">
        Append-only event history. Edits appear as new entries; effective standings derive from latest events per match slot.
    </MudText>

    <MudTable T="HistoryRow" ServerData="LoadServerData" Dense="true" Hover="true" Elevation="0" RowsPerPage="25" Bordered="false">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>#</MudTh>
            <MudTh>Match</MudTh>
            <MudTh>Sets</MudTh>
            <MudTh>Winner</MudTh>
            <MudTh>Submitted By</MudTh>
            <MudTh>Created</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.MatchDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="#">@context.DayOrdinal</MudTd>
            <MudTd DataLabel="Match">@context.PlayerOneName vs @context.PlayerTwoName</MudTd>
            <MudTd DataLabel="Sets">@string.Join(", ", context.Sets.Select(s => $"{s.playerOneScore}-{s.playerTwoScore}"))</MudTd>
            <MudTd DataLabel="Winner">@(string.IsNullOrWhiteSpace(context.WinnerName) ? "-" : context.WinnerName)</MudTd>
            <MudTd DataLabel="Submitted By">@context.SubmittedBy</MudTd>
            <MudTd DataLabel="Created">@context.CreatedAt.LocalDateTime</MudTd>
        </RowTemplate>
    </MudTable>
</MudStack>

@code {
    private async Task<TableData<HistoryRow>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1;
        var pageSize = state.PageSize <= 0 ? 25 : state.PageSize;
        var url = $"/api/history?page={page}&pageSize={pageSize}";

        var resp = await Http.GetFromJsonAsync<PagedResponse<HistoryRow>>(url, cancellationToken);
        if (resp is null)
            return new TableData<HistoryRow> { TotalItems = 0, Items = [] };
        return new TableData<HistoryRow> { TotalItems = resp.total, Items = resp.items };
    }

    private sealed record PagedResponse<T>(int page, int pageSize, int total, List<T> items);

    private sealed record HistoryRow(
        Guid EventId,
        DateOnly MatchDate,
        int DayOrdinal,
        string PlayerOneName,
        string PlayerTwoName,
        List<SetPairDto> Sets,
        Guid? WinnerPlayerId,
        string? WinnerName,
        string? SubmittedBy,
        DateTimeOffset CreatedAt)
    {
    }

    private sealed record SetPairDto(int playerOneScore, int playerTwoScore);
}
