@page "/players/{id:guid}"
@rendermode RenderMode.InteractiveServer
@inject IStandingsService StandingsService
@inject IHistoryService HistoryService

<PageTitle>@(_row is null ? "Spelare" : _row.PlayerName)</PageTitle>

<MudStack Spacing="3">
    @if (_isLoading)
    {
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="ma-6">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </MudStack>
    }
    else if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense="true">@_errorMessage</MudAlert>
    }
    else if (_row is not null)
    {
        <MudPaper Elevation="1" Class="pa-4">
            <MudStack Spacing="2">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Size="Size.Large" Color="Color.Primary" Variant="Variant.Filled">@BuildInitials(_row.PlayerName)</MudAvatar>
                    <MudText Typo="Typo.h4" Class="font-weight-semibold">@_row.PlayerName</MudText>
                </MudStack>

                <MudTable T="StandingRow" Items="SingleRow" Dense="true" Hover="false" Bordered="true" Elevation="0" Class="stats-table">
                    <HeaderContent>
                        <MudTh class="text-center">Matcher</MudTh>
                        <MudTh class="text-center">Vinster</MudTh>
                        <MudTh class="text-center">Förluster</MudTh>
                        <MudTh class="text-center">Vinst %</MudTh>
                        <MudTh class="text-center">Ranking</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Matcher" Class="text-center">@context.MatchesPlayed</MudTd>
                        <MudTd DataLabel="Vinster" Class="text-center">@context.Wins</MudTd>
                        <MudTd DataLabel="Förluster" Class="text-center">@context.Losses</MudTd>
                        <MudTd DataLabel="Vinst %" Class="text-center">@context.WinPercentage.ToString("P0")</MudTd>
                        <MudTd DataLabel="Ranking" Class="text-center">@context.CurrentRating.ToString("F0")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudStack>
        </MudPaper>

        <MudPaper Elevation="1" Class="pa-4">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5" Class="font-weight-semibold">Senaste matcher</MudText>
                
                <MudTable T="MatchHistoryEntry" Items="_recentMatches" Dense="true" Hover="true" Elevation="0" Bordered="true" Class="matches-table">
                    <HeaderContent>
                        <MudTh>Datum</MudTh>
                        <MudTh>Match</MudTh>
                        <MudTh>Set</MudTh>
                        <MudTh class="text-center">Resultat</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Datum">@context.MatchDate.ToString("yyyy-MM-dd")</MudTd>
                        <MudTd DataLabel="Match">@context.PlayerOneName mot @context.PlayerTwoName</MudTd>
                        <MudTd DataLabel="Set">@string.Join(", ", context.Sets.Select(s => $"{s.PlayerOneScore}-{s.PlayerTwoScore}"))</MudTd>
                        <MudTd DataLabel="Resultat" Class="text-center">
                            @if (context.WinnerPlayerId == Id)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">Vinst</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">Förlust</MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Inga matcher registrerade ännu.</MudText>
                    </NoRecordsContent>
                </MudTable>
            </MudStack>
        </MudPaper>

        <HeadToHeadPanel PlayerId="Id" />
        
    }
</MudStack>

@code {
    [Parameter] public Guid Id { get; set; }

    private StandingRow? _row;
    private IEnumerable<StandingRow> SingleRow => _row is null ? Array.Empty<StandingRow>() : new[] { _row };
    private readonly List<MatchHistoryEntry> _recentMatches = new();
    private bool _isLoading;
    private string? _errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if (_isLoading)
        {
            return;
        }

        _errorMessage = null;
        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var list = await StandingsService.GetStandingsAsync();
            _row = list.FirstOrDefault(x => x.PlayerId == Id);
            if (_row is null)
            {
                _errorMessage = "Kunde inte hitta spelaren.";
            }
            else
            {
                // Load recent matches for this player
                var (matches, _) = await HistoryService.GetHistoryAsync(1, 10, Id);
                _recentMatches.Clear();
                _recentMatches.AddRange(matches.OrderByDescending(m => m.MatchDate).ThenByDescending(m => m.CreatedAt));
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Kunde inte ladda spelarstatistik: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private static string BuildInitials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "?";
        }

        var parts = name.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        switch (parts.Length)
        {
            case 0:
                return "?";
            case 1:
            {
                var segment = parts[0];
                return segment.Length switch
                {
                    0 => "?",
                    1 => segment.ToUpperInvariant(),
                    _ => string.Concat(char.ToUpperInvariant(segment[0]), char.ToUpperInvariant(segment[1]))
                };
            }
            default:
            {
                var initials = string.Concat(parts.Take(2).Select(p => char.ToUpperInvariant(p[0])));
                return initials.Length == 0 ? "?" : initials;
            }
        }

    }
}


